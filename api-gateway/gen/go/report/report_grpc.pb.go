// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: report/report.proto

package reportproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReportService_SpendingbyCategory_FullMethodName = "/ReportService/SpendingbyCategory"
	ReportService_IncomeExpense_FullMethodName      = "/ReportService/IncomeExpense"
	ReportService_FromTill_FullMethodName           = "/ReportService/FromTill"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	SpendingbyCategory(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*ListSpendingResponse, error)
	IncomeExpense(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*IncomeExpenseResponse, error)
	FromTill(ctx context.Context, in *FromTillRequest, opts ...grpc.CallOption) (*FromTillResponse, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) SpendingbyCategory(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*ListSpendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpendingResponse)
	err := c.cc.Invoke(ctx, ReportService_SpendingbyCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) IncomeExpense(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*IncomeExpenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncomeExpenseResponse)
	err := c.cc.Invoke(ctx, ReportService_IncomeExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FromTill(ctx context.Context, in *FromTillRequest, opts ...grpc.CallOption) (*FromTillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FromTillResponse)
	err := c.cc.Invoke(ctx, ReportService_FromTill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations must embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	SpendingbyCategory(context.Context, *SpendingRequest) (*ListSpendingResponse, error)
	IncomeExpense(context.Context, *SpendingRequest) (*IncomeExpenseResponse, error)
	FromTill(context.Context, *FromTillRequest) (*FromTillResponse, error)
	mustEmbedUnimplementedReportServiceServer()
}

// UnimplementedReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (UnimplementedReportServiceServer) SpendingbyCategory(context.Context, *SpendingRequest) (*ListSpendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendingbyCategory not implemented")
}
func (UnimplementedReportServiceServer) IncomeExpense(context.Context, *SpendingRequest) (*IncomeExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomeExpense not implemented")
}
func (UnimplementedReportServiceServer) FromTill(context.Context, *FromTillRequest) (*FromTillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromTill not implemented")
}
func (UnimplementedReportServiceServer) mustEmbedUnimplementedReportServiceServer() {}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s grpc.ServiceRegistrar, srv ReportServiceServer) {
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_SpendingbyCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).SpendingbyCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_SpendingbyCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).SpendingbyCategory(ctx, req.(*SpendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_IncomeExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).IncomeExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_IncomeExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).IncomeExpense(ctx, req.(*SpendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FromTill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromTillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FromTill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_FromTill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FromTill(ctx, req.(*FromTillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the grpc.ServiceDesc for ReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpendingbyCategory",
			Handler:    _ReportService_SpendingbyCategory_Handler,
		},
		{
			MethodName: "IncomeExpense",
			Handler:    _ReportService_IncomeExpense_Handler,
		},
		{
			MethodName: "FromTill",
			Handler:    _ReportService_FromTill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report/report.proto",
}
