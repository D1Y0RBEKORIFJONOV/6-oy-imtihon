// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: incomeexpences/incomeexpences.proto

package incomepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IncomeExpenses_Income_FullMethodName   = "/IncomeExpenses/Income"
	IncomeExpenses_Expenses_FullMethodName = "/IncomeExpenses/Expenses"
	IncomeExpenses_Info_FullMethodName     = "/IncomeExpenses/Info"
)

// IncomeExpensesClient is the client API for IncomeExpenses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncomeExpensesClient interface {
	Income(ctx context.Context, in *CreateIncomeExpensesRequest, opts ...grpc.CallOption) (*CreateIncomeExpensesResponse, error)
	Expenses(ctx context.Context, in *CreateIncomeExpensesRequest, opts ...grpc.CallOption) (*CreateIncomeExpensesResponse, error)
	Info(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type incomeExpensesClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomeExpensesClient(cc grpc.ClientConnInterface) IncomeExpensesClient {
	return &incomeExpensesClient{cc}
}

func (c *incomeExpensesClient) Income(ctx context.Context, in *CreateIncomeExpensesRequest, opts ...grpc.CallOption) (*CreateIncomeExpensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIncomeExpensesResponse)
	err := c.cc.Invoke(ctx, IncomeExpenses_Income_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeExpensesClient) Expenses(ctx context.Context, in *CreateIncomeExpensesRequest, opts ...grpc.CallOption) (*CreateIncomeExpensesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIncomeExpensesResponse)
	err := c.cc.Invoke(ctx, IncomeExpenses_Expenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeExpensesClient) Info(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, IncomeExpenses_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomeExpensesServer is the server API for IncomeExpenses service.
// All implementations must embed UnimplementedIncomeExpensesServer
// for forward compatibility
type IncomeExpensesServer interface {
	Income(context.Context, *CreateIncomeExpensesRequest) (*CreateIncomeExpensesResponse, error)
	Expenses(context.Context, *CreateIncomeExpensesRequest) (*CreateIncomeExpensesResponse, error)
	Info(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	mustEmbedUnimplementedIncomeExpensesServer()
}

// UnimplementedIncomeExpensesServer must be embedded to have forward compatible implementations.
type UnimplementedIncomeExpensesServer struct {
}

func (UnimplementedIncomeExpensesServer) Income(context.Context, *CreateIncomeExpensesRequest) (*CreateIncomeExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Income not implemented")
}
func (UnimplementedIncomeExpensesServer) Expenses(context.Context, *CreateIncomeExpensesRequest) (*CreateIncomeExpensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expenses not implemented")
}
func (UnimplementedIncomeExpensesServer) Info(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedIncomeExpensesServer) mustEmbedUnimplementedIncomeExpensesServer() {}

// UnsafeIncomeExpensesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomeExpensesServer will
// result in compilation errors.
type UnsafeIncomeExpensesServer interface {
	mustEmbedUnimplementedIncomeExpensesServer()
}

func RegisterIncomeExpensesServer(s grpc.ServiceRegistrar, srv IncomeExpensesServer) {
	s.RegisterService(&IncomeExpenses_ServiceDesc, srv)
}

func _IncomeExpenses_Income_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncomeExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeExpensesServer).Income(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomeExpenses_Income_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeExpensesServer).Income(ctx, req.(*CreateIncomeExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeExpenses_Expenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncomeExpensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeExpensesServer).Expenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomeExpenses_Expenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeExpensesServer).Expenses(ctx, req.(*CreateIncomeExpensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeExpenses_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeExpensesServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomeExpenses_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeExpensesServer).Info(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncomeExpenses_ServiceDesc is the grpc.ServiceDesc for IncomeExpenses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncomeExpenses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IncomeExpenses",
	HandlerType: (*IncomeExpensesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Income",
			Handler:    _IncomeExpenses_Income_Handler,
		},
		{
			MethodName: "Expenses",
			Handler:    _IncomeExpenses_Expenses_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _IncomeExpenses_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incomeexpences/incomeexpences.proto",
}
