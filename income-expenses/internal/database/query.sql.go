// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
)

const getinfo = `-- name: Getinfo :many
SELECT id, userid, type, category, currency, amount, date FROM incomeexpenses WHERE userid=$1
`

func (q *Queries) Getinfo(ctx context.Context, userid sql.NullString) ([]Incomeexpense, error) {
	rows, err := q.db.QueryContext(ctx, getinfo, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Incomeexpense
	for rows.Next() {
		var i Incomeexpense
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Type,
			&i.Category,
			&i.Currency,
			&i.Amount,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInfo = `-- name: InsertInfo :one
INSERT INTO incomeexpenses (id,userid,type,category,currency,amount,date) VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING id
`

type InsertInfoParams struct {
	ID       sql.NullString
	Userid   sql.NullString
	Type     sql.NullString
	Category sql.NullString
	Currency sql.NullString
	Amount   sql.NullFloat64
	Date     sql.NullString
}

func (q *Queries) InsertInfo(ctx context.Context, arg InsertInfoParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, insertInfo,
		arg.ID,
		arg.Userid,
		arg.Type,
		arg.Category,
		arg.Currency,
		arg.Amount,
		arg.Date,
	)
	var id sql.NullString
	err := row.Scan(&id)
	return id, err
}
